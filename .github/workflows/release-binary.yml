name: Release

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create-release:
    name: create a new Extempore release on GitHub
    runs-on: ubuntu-latest # or any other OS, doesn't matter
    timeout-minutes: 5
    steps:
      # to get the tag name
      - id: tag-name
        uses: olegtarasov/get-tag@v2

      - id: create-release-step
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.tag-name.outputs.tag }}
          draft:  ${{ endsWith(github.ref, '-draft') }}
          prerelease: ${{ endsWith(github.ref, '-pre') }}

      - name: write release URL artifact
        run: echo ${{ steps.create-release-step.outputs.upload_url }} > gh-release-upload-url.txt

      - name: store GH release upload URL
        uses: actions/upload-artifact@v1
        with:
          name: upload-url
          path: gh-release-upload-url.txt



  build:
    name: build & upload the zipfile to the GitHub releases page
    needs: create-release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-16.04
          - ubuntu-latest
          - macos-latest
          - windows-2016
          - windows-latest
        include:
          - os: windows-2016
            cmake-generator: -G "Visual Studio 15 2017" -A x64
          - os: windows-latest
            cmake-generator: -G "Visual Studio 16 2019" -A x64

    steps:
      - uses: actions/checkout@v2

      # - if: contains(matrix.os, 'ubuntu')
      #   name: deps
      #   run: sudo apt-get install libasound2-dev xorg-dev libglu1-mesa-dev

      # - name: configure
      #   run: mkdir build && cd build && cmake ${{ matrix.cmake-generator }} -DPACKAGE=ON ..

      # - name: build
      #   run: cmake --build build --config Release --target package

      # these next two steps are necessary to pass the upload url from a step in
      # one job to a step in another
      # https://help.github.com/en/actions/configuring-and-managing-workflows/persisting-workflow-data-using-artifacts
      - name: retrieve release URL artifact
        uses: actions/download-artifact@v1
        with:
          name: upload-url

      - name: slurp upload URL from artifact file
        id: slurp-upload-url
        run: |
          ls
          cat gh-release-upload-url.txt
          echo "::set-output name=upload-url::`cat gh-release-upload-url.txt`"

      # to get the tag name
      - id: tag-name
        uses: olegtarasov/get-tag@v2

      - name: upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.slurp-upload-url.outputs.upload-url }}
          asset_path: "build/Extempore-package.zip"
          asset_name: Extempore-${{ steps.tag-name.outputs.tag }}-${{ matrix.os }}.zip
          asset_content_type: application/zip
