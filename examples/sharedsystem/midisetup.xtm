;;
;; possible cmd line args:
;;
;;  .\extempore.exe --device-name="Primary Sound Driver" --channels=2 --midiin="UFX Midi Port 2" --midiout="Maschine MK3 EXT MIDI" --run .\examples\sharedsystem\midisetup.xtm 
;;

;;
;; Load libraries
;;

;; midisetup is included in audiosetup but can be run standalone for quicker load times

;; (sys:load "libs/external/instruments_ext.xtm")
;; (sys:load "libs/external/audio_dsp_ext.xtm")
(sys:load "libs/external/midi.xtm")
(sys:load "libs/core/looper.xtm")
(sys:load "libs/core/pc_ivl.xtm")

(if (and (sys:cmdarg "midiin")
         (sys:cmdarg "midiout"))
    (begin
      (set_midi_in (pm_input_device_with_name (sys:cmdarg "midiin")))
      (define *min* (get_midi_in))
      (set_midi_out (pm_output_device_with_name (sys:cmdarg "midiout")))
      (define *mout* (get_midi_out))
      (println 'MIDIIN '*min* (sys:cmdarg "midiin") 'is *min*)
      (println 'MIDIOUT '*mout* (sys:cmdarg "midiout") 'is *mout*))
    (print-with-colors
     'yellow 'default #t
     (print "no midiin or midiout CLI args specified, skipping midi device setup\n")))

(bind-val MCC_ARR |127,float|)

(bind-func MCC
  (lambda (idx)
    (aref MCC_ARR idx)))

(bind-func midi_note_on
  (lambda (timestamp:i32 pitch:i32 volume:i32 chan:i32)
    ;; (println "NOTE_ON :" pitch volume chan "timestamp:" timestamp)
    void))

(bind-func midi_note_off
  (lambda (timestamp:i32 pitch:i32 volume:i32 chan:i32)
    ;; (println "NOTE_OFF:" pitch volume chan "timestamp:" timestamp)
    void))

(bind-func midi_cc
  (lambda (timestamp:i32 controller:i32 value:i32 chan:i32)
    ;; (println "MIDI_CC :" controller value chan "timestamp:" timestamp)
    void))

(bind-func get_analogue_synth_cc_name
  (let ((string_names (array_ref
      "osc1: gain" "osc1: wave shape 0:sin 1:saw 2:sqr 3:tri" "osc1: pulse width" "osc1: fine tune" "osc1: course tune" "osc1: pan (deprecated)" "n/a" "n/a"
      "osc2: gain" "osc2: wave shape 0:sin 1:saw 2:sqr 3:tri" "osc2: pulse width" "osc2: fine tune" "osc2: course tune" "osc2: pan (deprecated)" "n/a" "n/a"
      "osc3: gain" "osc3: wave shape 0:sin 1:saw 2:sqr 3:tri" "osc3: pulse width" "osc3: fine tune" "osc3: course tune" "osc3: pan (deprecated)" "n/a" "n/a"
      "osc3: gain" "osc4: wave shape 0:sin 1:saw 2:sqr 3:tri" "osc4: pulse width" "osc4: fine tune" "osc4: course tune" "osc4: pan (deprecated)" "n/a" "n/a"
      "sub: gain" "noise: gain" "noise: white/pink (0:white 1:pink)" "lpf: 12/24 db (0:12 1:24)" "lpf: cutoff" "lpf: resonance" "hfp: cutoff" "lpf: overdrive"
      "amp env: attack" "amp env: decay" "amp env: sustain" "amp env: release" "amp env: length multiplier" "pitch env: attack" "pitch env: decay" "pitch env: range"
      "filter env: attack" "filter env: decay" "filter env: sustain" "filter env: release" "filter env: length multiplier" "filter env: frequency range" "filter env: track pitch amount" "filter env: track amplitude amount"
      "delay: left" "delay: right" "delay: mix" "delay: feedback" "reverb: mix" "reverb: room size" "reverb: pre-delay" "reverb: absorb"
      "flanger: mix" "flanger: lo/ms" "flanger: lo/scale" "flanger: hi/ms" "flanger: hi/scale" "flanger: rate" "flanger: fb" "n/a"
      "global: pan" "global: gain" "global: portamento" "reset (if val === 127)"
      "matrix: source" "matrix: target" "matrix: amt" "n/a"
      "lfo1: attack" "lfo1: decay" "lfo1: attack curve" "lfo1: decay curve" "lfo1: length" "lfo1: amplitude" "lfo1: frequency" "lfo1: wave")))
    (lambda (cc:i32)
      (if (> cc 88)
          "<no cc for analogue synth>"
          (aref string_names cc)))))

;; override midi_cc for analogue chans  1, 2 and 3
(bind-func midi_cc
  (lambda (timestamp:i32 controller:i32 value:i32 chan:i32)
    (aset! MCC_ARR controller (/ (i32tof value) 127.0))
    (if (< chan 3)
        (printf "\rMIDI_CC: %d %f %d (%s) %s" controller (ftod (aref MCC_ARR controller)) chan (get_analogue_synth_cc_name controller)
                "                                                           \r") ;; ugly but can't get vt100 codes working on windows :(
        (printf "MIDI_CC: %d %f %d\r" controller (ftod (aref MCC_ARR controller)) chan))
    (if (= chan 0) (analogue_cc (cast syn1) 0 controller value))
    (if (= chan 1) (analogue_cc (cast syn2) 1 controller value))
    (if (= chan 2) (analogue_cc (cast syn3) 2 controller value))
    void))

;; start up midi 'xtlang' scheduler
(start_midi_scheduler)

(println "Finished MIDI setup")
