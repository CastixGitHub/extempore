;;; rtmidi-scm.xtm -- utils for MIDI handling

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: rtmidi

;;; Commentary:

;;

;;; Code:

;; xtlang

(bind-func midi_out_create
  (lambda (api client_name)
    (rtmidi_out_create api client_name)))

(bind-func midi_out_create_default
  (lambda ()
    (rtmidi_out_create_default)))

(bind-func midi_open_port
  (lambda (device port_number port_name)
    (rtmidi_open_port device port_number port_name)))

(bind-func midi_close_port
  (lambda (device)
    (rtmidi_close_port device)))

(bind-func midi_send
  (let ((msg:i8* (alloc 3)))
    (lambda (device type chan a b)
      (pfill! msg (+ (<< type 4) chan) a b)
      (rtmidi_out_send_message device msg 3))))

;; Scheme stuff

(define *midi-note-off* 8)              ;; key, velocity
(define *midi-note-on* 9)               ;; key, velocity
(define *midi-aftertouch* 10)           ;; key, touch
(define *midi-control-change* 11)       ;; controller, value
(define *midi-cc* 11)                   ;; controller, value
(define *midi-program-change* 12)       ;; value, ignored
(define *midi-channel-pressure* 13)     ;; value, ignored
(define *midi-pitch-bend* 14)           ;; lsb (7 bits), msb (7 bits)

(impc:aot:do-or-emit
 (define play-midi-note
   (lambda (time device pitch velocity duration channel)
     (callback time 'midi_send device *midi-note-on* channel pitch velocity)
     (callback (+ time duration (* -2 *au:block-size*)) 'midi_send device *midi-note-off* channel pitch velocity))))

(impc:aot:do-or-emit
 (define send-midi-cc
   (lambda (time device cc val channel)
     (callback time 'midi_send device *midi-cc* channel cc val))))

;; homophonic playnote
(impc:aot:do-or-emit
 (define homo-play-midi-note
   (let ((notes (make-vector 127 0)))
     (lambda (time device pitch velocity duration channel)
       (if (> time (vector-ref notes pitch))
           (let ((dur (- duration (* 2 *au:block-size*))))
             (vector-set! notes pitch (+ time dur))
             (callback time 'midi_send device *midi-note-on* channel pitch velocity)
             (callback (+ time duration) 'midi_send device *midi-note-off* channel pitch velocity)))))))

;; A midi-specific play macro

(impc:aot:do-or-emit
 (define-macro (mplay . args)
   (if (symbol? (car args))
       `(homo-play-midi-note (*metro* beat) ,(car args)
                             (real->integer ,(cadr args))
                             (real->integer ,(caddr args))
                             (*metro* 'dur ,(car (cdddr args)))
                             (real->integer , (car (cddddr args))))
       `(homo-play-midi-note (*metro* (+ beat ,(car args))) ,(cadr args)
                             (real->integer ,(caddr args))
                             (real->integer ,(car (cdddr args)))
                             (*metro* 'dur ,(cadr (cdddr args)))
                             (real->integer , (cadr (cddddr args)))))))

(impc:aot:do-or-emit
 (define-macro (mcc . args)
   (if (symbol? (car args))
       `(send-midi-cc (*metro* beat) ,(car args)
                      (real->integer ,(cadr args))
                      (real->integer ,(caddr args))
                      (real->integer ,(car (cdddr args))))
       `(send-midi-cc (*metro* (+ beat ,(car args))) ,(cadr args)
                      (real->integer ,(caddr args))
                      (real->integer ,(car (cdddr args)))
                      (real->integer ,(car (cddddr args)))))))

(impc:aot:do-or-emit
 (define-macro (mplayob o b . args)
   `(if (= 0 (modulo (+ ,o beat) ,b))
        (mplay ,@args)
        #f)))

(impc:aot:do-or-emit
 (define-macro (mplayobs l b . args)
   `(if (member (modulo beat ,b) ,l)
        (mplay ,@args)
        #f)))
