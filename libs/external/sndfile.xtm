;;; sndfile.xtm -- sndfile bindings for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; Extempore bindings for libsndfile

;; These bindings were automatically generated by c2xt.py on 2018-12-11

;;; Code:

(sys:load "libs/aot-cache/sndfile.xtm" 'quiet)
(sys:load-preload-check 'sndfile)
(define *xtmlib-sndfile-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmsndfile")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libsndfile
  (cond ((string=? (sys:platform) "OSX")
         "libsndfile.dylib")
        ((string=? (sys:platform) "Linux")
         "libsndfile.so")
        ((string=? (sys:platform) "Windows")
         "sndfile.dll")))

(bind-val SF_FORMAT_WAV i32 #x10000 "")
(bind-val SF_FORMAT_AIFF i32 #x20000 "")
(bind-val SF_FORMAT_AU i32 #x30000 "")
(bind-val SF_FORMAT_RAW i32 #x40000 "")
(bind-val SF_FORMAT_PAF i32 #x50000 "")
(bind-val SF_FORMAT_SVX i32 #x60000 "")
(bind-val SF_FORMAT_NIST i32 #x70000 "")
(bind-val SF_FORMAT_VOC i32 #x80000 "")
(bind-val SF_FORMAT_IRCAM i32 #xA0000 "")
(bind-val SF_FORMAT_W64 i32 #xB0000 "")
(bind-val SF_FORMAT_MAT4 i32 #xC0000 "")
(bind-val SF_FORMAT_MAT5 i32 #xD0000 "")
(bind-val SF_FORMAT_PVF i32 #xE0000 "")
(bind-val SF_FORMAT_XI i32 #xF0000 "")
(bind-val SF_FORMAT_HTK i32 #x100000 "")
(bind-val SF_FORMAT_SDS i32 #x110000 "")
(bind-val SF_FORMAT_AVR i32 #x120000 "")
(bind-val SF_FORMAT_WAVEX i32 #x130000 "")
(bind-val SF_FORMAT_SD2 i32 #x160000 "")
(bind-val SF_FORMAT_FLAC i32 #x170000 "")
(bind-val SF_FORMAT_CAF i32 #x180000 "")
(bind-val SF_FORMAT_WVE i32 #x190000 "")
(bind-val SF_FORMAT_OGG i32 #x200000 "")
(bind-val SF_FORMAT_MPC2K i32 #x210000 "")
(bind-val SF_FORMAT_RF64 i32 #x220000 "")
(bind-val SF_FORMAT_PCM_S8 i32 #x1 "")
(bind-val SF_FORMAT_PCM_16 i32 #x2 "")
(bind-val SF_FORMAT_PCM_24 i32 #x3 "")
(bind-val SF_FORMAT_PCM_32 i32 #x4 "")
(bind-val SF_FORMAT_PCM_U8 i32 #x5 "")
(bind-val SF_FORMAT_FLOAT i32 #x6 "")
(bind-val SF_FORMAT_DOUBLE i32 #x7 "")
(bind-val SF_FORMAT_ULAW i32 #x10 "")
(bind-val SF_FORMAT_ALAW i32 #x11 "")
(bind-val SF_FORMAT_IMA_ADPCM i32 #x12 "")
(bind-val SF_FORMAT_MS_ADPCM i32 #x13 "")
(bind-val SF_FORMAT_GSM610 i32 #x20 "")
(bind-val SF_FORMAT_VOX_ADPCM i32 #x21 "")
(bind-val SF_FORMAT_NMS_ADPCM_16 i32 #x22 "")
(bind-val SF_FORMAT_NMS_ADPCM_24 i32 #x23 "")
(bind-val SF_FORMAT_NMS_ADPCM_32 i32 #x24 "")
(bind-val SF_FORMAT_G721_32 i32 #x30 "")
(bind-val SF_FORMAT_G723_24 i32 #x31 "")
(bind-val SF_FORMAT_G723_40 i32 #x32 "")
(bind-val SF_FORMAT_DWVW_12 i32 #x40 "")
(bind-val SF_FORMAT_DWVW_16 i32 #x41 "")
(bind-val SF_FORMAT_DWVW_24 i32 #x42 "")
(bind-val SF_FORMAT_DWVW_N i32 #x43 "")
(bind-val SF_FORMAT_DPCM_8 i32 #x50 "")
(bind-val SF_FORMAT_DPCM_16 i32 #x51 "")
(bind-val SF_FORMAT_VORBIS i32 #x60 "")
(bind-val SF_FORMAT_ALAC_16 i32 #x70 "")
(bind-val SF_FORMAT_ALAC_20 i32 #x71 "")
(bind-val SF_FORMAT_ALAC_24 i32 #x72 "")
(bind-val SF_FORMAT_ALAC_32 i32 #x73 "")
(bind-val SF_ENDIAN_FILE i32 #x0 "")
(bind-val SF_ENDIAN_LITTLE i32 #x10000000 "")
(bind-val SF_ENDIAN_BIG i32 #x20000000 "")
(bind-val SF_ENDIAN_CPU i32 #x30000000 "")
(bind-val SF_FORMAT_SUBMASK i32 #xFFFF "")
(bind-val SF_FORMAT_TYPEMASK i32 #xFFF0000 "")
(bind-val SF_FORMAT_ENDMASK i32 #x30000000 "")
(bind-type SNDFILE_tag <> "")
(bind-alias SNDFILE <> "")
(bind-type SF_INFO <> "@member frames - index 0
@member samplerate - index 1
@member channels - index 2
@member format - index 3
@member sections - index 4
@member seekable - index 5")
(bind-alias SF_FORMAT_INFO <i32,i8*,i8*> "")
(bind-alias SF_DITHER_INFO <i32,double,i8*> "")
(bind-alias SF_EMBED_FILE_INFO <> "")
(bind-alias SF_CUE_POINT <int32_t,uint32_t,int32_t,int32_t,int32_t,uint32_t,|256,i8|> "")
(bind-alias SF_CUES <uint32_t,|100,SF_CUE_POINT|> "")
(bind-alias SF_INSTRUMENT <i32,i8,i8,i8,i8,i8,i8,i32,|16,<i32,uint32_t,uint32_t,uint32_t>|> "")
(bind-alias SF_LOOP_INFO <i16,i16,i32,i32,float,i32,|6,i32|> "")
(bind-alias SF_BROADCAST_INFO <|256,i8|,|32,i8|,|32,i8|,|10,i8|,|8,i8|,uint32_t,uint32_t,i16,|64,i8|,|190,i8|,uint32_t,|256,i8|> "")
(bind-type SF_CART_TIMER <|4,i8|,int32_t> "@member usage - index 0
@member value - index 1")
(bind-alias SF_CART_INFO <|4,i8|,|64,i8|,|64,i8|,|64,i8|,|64,i8|,|64,i8|,|64,i8|,|64,i8|,|10,i8|,|8,i8|,|10,i8|,|8,i8|,|64,i8|,|64,i8|,|64,i8|,int32_t,|8,SF_CART_TIMER|,|276,i8|,|1024,i8|,uint32_t,|256,i8|> "")
(bind-alias sf_count_t [i32,i32*]* "")
(bind-alias sf_vio_seek [i32,sf_count_t,i32,i8*]** "")
(bind-alias sf_vio_read [i32,i8*,sf_count_t,i8*]** "")
(bind-alias sf_vio_write [i32,i8*,sf_count_t,i8*]** "")
(bind-alias sf_vio_tell [i32,i8*]** "")
(bind-type SF_VIRTUAL_IO <> "@member get_filelen - index 0
@member seek - index 1
@member read - index 2
@member write - index 3
@member tell - index 4")
(bind-lib libsndfile sf_open [SNDFILE*,i8*,i32,SF_INFO*]* "@param SNDFILE - index 0
@param path - index 1
@param mode - index 2
@param sfinfo - index 3")
(bind-lib libsndfile sf_open_fd [SNDFILE*,i32,i32,SF_INFO*,i32]* "@param SNDFILE - index 0
@param fd - index 1
@param mode - index 2
@param sfinfo - index 3
@param close_desc - index 4")
(bind-lib libsndfile sf_open_virtual [SNDFILE*,SF_VIRTUAL_IO*,i32,SF_INFO*,i8*]* "@param SNDFILE - index 0
@param sfvirtual - index 1
@param mode - index 2
@param sfinfo - index 3
@param user_data - index 4")
(bind-lib libsndfile sf_error [i32,SNDFILE*]* "@param sndfile - index 0")
(bind-lib libsndfile sf_strerror [i8*,SNDFILE*]* "@param sndfile - index 0")
(bind-lib libsndfile sf_error_number [i8*,i32]* "@param errnum - index 0")
(bind-lib libsndfile sf_perror [i32,SNDFILE*]* "@param sndfile - index 0")
(bind-lib libsndfile sf_error_str [i32,SNDFILE*,i8*,size_t]* "@param sndfile - index 0
@param str - index 1
@param len - index 2")
(bind-lib libsndfile sf_command [i32,SNDFILE*,i32,i8*,i32]* "@param sndfile - index 0
@param command - index 1
@param data - index 2
@param datasize - index 3")
(bind-lib libsndfile sf_format_check [i32,SF_INFO*]* "@param info - index 0")
(bind-lib libsndfile sf_seek [i32,SNDFILE*,sf_count_t,i32]* "")
(bind-lib libsndfile sf_set_string [i32,SNDFILE*,i32,i8*]* "@param sndfile - index 0
@param str_type - index 1
@param str - index 2")
(bind-lib libsndfile sf_get_string [i8*,SNDFILE*,i32]* "@param sndfile - index 0
@param str_type - index 1")
(bind-lib libsndfile sf_version_string [i8*]* "")
(bind-lib libsndfile sf_current_byterate [i32,SNDFILE*]* "@param sndfile - index 0")
(bind-lib libsndfile sf_read_raw [i32,SNDFILE*,i8*,sf_count_t]* "")
(bind-lib libsndfile sf_write_raw [i32,SNDFILE*,i8*,sf_count_t]* "")
(bind-lib libsndfile sf_readf_short [i32,SNDFILE*,i16*,sf_count_t]* "")
(bind-lib libsndfile sf_writef_short [i32,SNDFILE*,i16*,sf_count_t]* "")
(bind-lib libsndfile sf_readf_int [i32,SNDFILE*,i32*,sf_count_t]* "")
(bind-lib libsndfile sf_writef_int [i32,SNDFILE*,i32*,sf_count_t]* "")
(bind-lib libsndfile sf_readf_float [i32,SNDFILE*,float*,sf_count_t]* "")
(bind-lib libsndfile sf_writef_float [i32,SNDFILE*,float*,sf_count_t]* "")
(bind-lib libsndfile sf_readf_double [i32,SNDFILE*,double*,sf_count_t]* "")
(bind-lib libsndfile sf_writef_double [i32,SNDFILE*,double*,sf_count_t]* "")
(bind-lib libsndfile sf_read_short [i32,SNDFILE*,i16*,sf_count_t]* "")
(bind-lib libsndfile sf_write_short [i32,SNDFILE*,i16*,sf_count_t]* "")
(bind-lib libsndfile sf_read_int [i32,SNDFILE*,i32*,sf_count_t]* "")
(bind-lib libsndfile sf_write_int [i32,SNDFILE*,i32*,sf_count_t]* "")
(bind-lib libsndfile sf_read_float [i32,SNDFILE*,float*,sf_count_t]* "")
(bind-lib libsndfile sf_write_float [i32,SNDFILE*,float*,sf_count_t]* "")
(bind-lib libsndfile sf_read_double [i32,SNDFILE*,double*,sf_count_t]* "")
(bind-lib libsndfile sf_write_double [i32,SNDFILE*,double*,sf_count_t]* "")
(bind-lib libsndfile sf_close [i32,SNDFILE*]* "@param sndfile - index 0")
(bind-lib libsndfile sf_write_sync [void,SNDFILE*]* "@param sndfile - index 0")
(bind-type SF_CHUNK_INFO <|64,i8|,i32,i32,i8*> "@member id - index 0
@member id_size - index 1
@member datalen - index 2
@member data - index 3")
(bind-lib libsndfile sf_set_chunk [i32,SNDFILE*,SF_CHUNK_INFO*]* "@param sndfile - index 0
@param chunk_info - index 1")
(bind-type SF_CHUNK_ITERATOR <> "")
(bind-lib libsndfile sf_get_chunk_iterator [SF_CHUNK_ITERATOR*,SNDFILE*,SF_CHUNK_INFO*]* "@param SF_CHUNK_ITERATOR - index 0
@param sndfile - index 1
@param chunk_info - index 2")
(bind-lib libsndfile sf_next_chunk_iterator [SF_CHUNK_ITERATOR*,SF_CHUNK_ITERATOR*]* "@param SF_CHUNK_ITERATOR - index 0
@param iterator - index 1")
(bind-lib libsndfile sf_get_chunk_size [i32,SF_CHUNK_ITERATOR*,SF_CHUNK_INFO*]* "@param it - index 0
@param chunk_info - index 1")
(bind-lib libsndfile sf_get_chunk_data [i32,SF_CHUNK_ITERATOR*,SF_CHUNK_INFO*]* "@param it - index 0
@param chunk_info - index 1")
(impc:aot:insert-footer "xtmsndfile")
(define *xtmlib-sndfile-loaded* #t)

